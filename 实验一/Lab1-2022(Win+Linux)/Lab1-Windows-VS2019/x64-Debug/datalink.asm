; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31106.2 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__DB5CC0B5_concurrencysal@h DB 01H
__AF0C05D0_sal@h DB 01H
__8CDE29DC_vadefs@h DB 01H
__F3BF9534_vcruntime@h DB 01H
__D3DE660D_corecrt@h DB 01H
__4C2892DF_corecrt_stdio_config@h DB 01H
__93572EE7_corecrt_wstdio@h DB 01H
__5F67261C_stdio@h DB 01H
__FF47366E_errno@h DB 01H
__C52A2ACB_vcruntime_string@h DB 01H
__C40B9FB8_corecrt_memcpy_s@h DB 01H
__B698C7EE_corecrt_memory@h DB 01H
__C9CF11B0_corecrt_wstring@h DB 01H
__E36C0A2C_string@h DB 01H
__C00CF975_stdarg@h DB 01H
__56005DD6_lprintf@h DB 01H
__6FF56852_protocol@h DB 01H
__B11DB28F_datalink@h DB 01H
__26CF6B07_datalink@c DB 01H
msvcjmc	ENDS
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BI@GICFHJCA@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@		; `string'
PUBLIC	??_C@_0DI@HPBLHLPE@Designed?5by?5Jiang?5Yanjun?0?5build@ ; `string'
PUBLIC	??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@ ; `string'
PUBLIC	??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@		; `string'
PUBLIC	??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@ ; `string'
EXTRN	memcpy:PROC
EXTRN	lprintf:PROC
EXTRN	protocol_init:PROC
EXTRN	wait_for_event:PROC
EXTRN	enable_network_layer:PROC
EXTRN	disable_network_layer:PROC
EXTRN	get_packet:PROC
EXTRN	put_packet:PROC
EXTRN	recv_frame:PROC
EXTRN	send_frame:PROC
EXTRN	crc32:PROC
EXTRN	start_timer:PROC
EXTRN	stop_timer:PROC
EXTRN	dbg_event:PROC
EXTRN	dbg_frame:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
frame_nr DB	01H DUP (?)
	ALIGN	4

buffer	DB	0100H DUP (?)
nbuffered DB	01H DUP (?)
	ALIGN	4

frame_expected DB 01H DUP (?)
	ALIGN	4

phl_ready DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$put_frame DD imagerel put_frame
	DD	imagerel put_frame+113
	DD	imagerel $unwind$put_frame
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_data_frame DD imagerel send_data_frame
	DD	imagerel send_data_frame+220
	DD	imagerel $unwind$send_data_frame
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_ack_frame DD imagerel send_ack_frame
	DD	imagerel send_ack_frame+157
	DD	imagerel $unwind$send_ack_frame
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN20
	DD	imagerel $LN20+599
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@
CONST	SEGMENT
??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@ DB '---- DATA %d tim'
	DB	'eout', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@ DB 'Recv DATA'
	DB	' %d %d, ID %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@ DB 'Recv ACK  %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@
CONST	SEGMENT
??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@ DB '*'
	DB	'*** Receiver Error, Bad CRC Checksum', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HPBLHLPE@Designed?5by?5Jiang?5Yanjun?0?5build@
CONST	SEGMENT
??_C@_0DI@HPBLHLPE@Designed?5by?5Jiang?5Yanjun?0?5build@ DB 'Designed by '
	DB	'Jiang Yanjun, build: Apr 22 2022  16:54:14', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@ DB 'Send ACK  %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GICFHJCA@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@GICFHJCA@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@ DB 'Send DATA'
	DB	' %d %d, ID %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	039H
	DW	023eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025054019H
	DD	01122317H
	DD	0700b004fH
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	0268H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 061H
	DB	072H
	DB	067H
	DB	00H
main$rtcName$1 DB 066H
	DB	00H
	ORG $+10
main$rtcVarDesc DD 070H
	DD	0108H
	DQ	FLAT:main$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:main$rtcName$0
	ORG $+96
main$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02aH
	DB	084H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_ack_frame DD 025053119H
	DD	010a230fH
	DD	070030043H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
send_ack_frame$rtcName$0 DB 073H
	DB	00H
	ORG $+14
send_ack_frame$rtcVarDesc DD 030H
	DD	0108H
	DQ	FLAT:send_ack_frame$rtcName$0
	ORG $+48
send_ack_frame$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:send_ack_frame$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02aH
	DB	0c3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_data_frame DD 025053119H
	DD	010a230fH
	DD	070030043H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
send_data_frame$rtcName$0 DB 073H
	DB	00H
	ORG $+14
send_data_frame$rtcVarDesc DD 030H
	DD	0108H
	DQ	FLAT:send_data_frame$rtcName$0
	ORG $+48
send_data_frame$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:send_data_frame$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$put_frame DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Course\Term4 计算机网络\实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT main
_TEXT	SEGMENT
event$ = 4
arg$ = 36
f$ = 80
len$ = 372
tv69 = 580
__$ArrayPad$ = 584
argc$ = 624
argv$ = 632
main	PROC						; COMDAT

; 56   : {

$LN20:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 632				; 00000278H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+664]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__26CF6B07_datalink@c
	call	__CheckForDebuggerJustMyCode

; 57   : 	int event, arg;
; 58   : 	struct FRAME f;
; 59   : 	int len = 0;

	mov	DWORD PTR len$[rbp], 0

; 60   : 
; 61   : 	protocol_init(argc, argv);

	mov	rdx, QWORD PTR argv$[rbp]
	mov	ecx, DWORD PTR argc$[rbp]
	call	protocol_init

; 62   : 	lprintf("Designed by Jiang Yanjun, build: " __DATE__ "  "__TIME__"\n");

	lea	rcx, OFFSET FLAT:??_C@_0DI@HPBLHLPE@Designed?5by?5Jiang?5Yanjun?0?5build@
	call	lprintf

; 63   : 
; 64   : 	disable_network_layer();

	call	disable_network_layer
$LN2@main:

; 65   : 
; 66   : 	for (;;) {
; 67   : 		event = wait_for_event(&arg);

	lea	rcx, QWORD PTR arg$[rbp]
	call	wait_for_event
	mov	DWORD PTR event$[rbp], eax

; 68   : 
; 69   : 		switch (event) {

	mov	eax, DWORD PTR event$[rbp]
	mov	DWORD PTR tv69[rbp], eax
	cmp	DWORD PTR tv69[rbp], 0
	je	SHORT $LN7@main
	cmp	DWORD PTR tv69[rbp], 1
	je	SHORT $LN8@main
	cmp	DWORD PTR tv69[rbp], 2
	je	SHORT $LN9@main
	cmp	DWORD PTR tv69[rbp], 3
	je	$LN16@main
	jmp	$LN5@main
$LN7@main:

; 70   : 		case NETWORK_LAYER_READY:
; 71   : 			get_packet(buffer);

	lea	rcx, OFFSET FLAT:buffer
	call	get_packet

; 72   : 			nbuffered++;

	movzx	eax, BYTE PTR nbuffered
	inc	al
	mov	BYTE PTR nbuffered, al

; 73   : 			send_data_frame();

	call	send_data_frame

; 74   : 			break;

	jmp	$LN5@main
$LN8@main:

; 75   : 
; 76   : 		case PHYSICAL_LAYER_READY:
; 77   : 			phl_ready = 1;

	mov	DWORD PTR phl_ready, 1

; 78   : 			break;

	jmp	$LN5@main
$LN9@main:

; 79   : 
; 80   : 		case FRAME_RECEIVED:
; 81   : 			len = recv_frame((unsigned char *)&f, sizeof f);

	mov	edx, 264				; 00000108H
	lea	rcx, QWORD PTR f$[rbp]
	call	recv_frame
	mov	DWORD PTR len$[rbp], eax

; 82   : 			if (len < 5 || crc32((unsigned char *)&f, len) != 0) {

	cmp	DWORD PTR len$[rbp], 5
	jl	SHORT $LN11@main
	mov	edx, DWORD PTR len$[rbp]
	lea	rcx, QWORD PTR f$[rbp]
	call	crc32
	test	eax, eax
	je	SHORT $LN10@main
$LN11@main:

; 83   : 				dbg_event("**** Receiver Error, Bad CRC Checksum\n");

	lea	rcx, OFFSET FLAT:??_C@_0CH@HDFIPIGB@?$CK?$CK?$CK?$CK?5Receiver?5Error?0?5Bad?5CRC?5Ch@
	call	dbg_event

; 84   : 				break;

	jmp	$LN5@main
$LN10@main:

; 85   : 			}
; 86   : 			if (f.kind == FRAME_ACK)

	movzx	eax, BYTE PTR f$[rbp]
	cmp	eax, 2
	jne	SHORT $LN12@main

; 87   : 				dbg_frame("Recv ACK  %d\n", f.ack);

	movzx	eax, BYTE PTR f$[rbp+1]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0O@DBLMMIFM@Recv?5ACK?5?5?$CFd?6@
	call	dbg_frame
$LN12@main:

; 88   : 			if (f.kind == FRAME_DATA) {

	movzx	eax, BYTE PTR f$[rbp]
	cmp	eax, 1
	jne	SHORT $LN13@main

; 89   : 				dbg_frame("Recv DATA %d %d, ID %d\n", f.seq,

	movsx	eax, WORD PTR f$[rbp+3]
	movzx	ecx, BYTE PTR f$[rbp+1]
	movzx	edx, BYTE PTR f$[rbp+2]
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, OFFSET FLAT:??_C@_0BI@LEOKNOFG@Recv?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@
	call	dbg_frame

; 90   : 					  f.ack, *(short *)f.data);
; 91   : 				if (f.seq == frame_expected) {

	movzx	eax, BYTE PTR f$[rbp+2]
	movzx	ecx, BYTE PTR frame_expected
	cmp	eax, ecx
	jne	SHORT $LN14@main

; 92   : 					put_packet(f.data, len - 7);

	mov	eax, DWORD PTR len$[rbp]
	sub	eax, 7
	mov	edx, eax
	lea	rcx, QWORD PTR f$[rbp+3]
	call	put_packet

; 93   : 					frame_expected = 1 - frame_expected;

	movzx	eax, BYTE PTR frame_expected
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR frame_expected, al
$LN14@main:

; 94   : 				}
; 95   : 				send_ack_frame();

	call	send_ack_frame
$LN13@main:

; 96   : 			}
; 97   : 			if (f.ack == frame_nr) {

	movzx	eax, BYTE PTR f$[rbp+1]
	movzx	ecx, BYTE PTR frame_nr
	cmp	eax, ecx
	jne	SHORT $LN15@main

; 98   : 				stop_timer(frame_nr);

	movzx	eax, BYTE PTR frame_nr
	mov	ecx, eax
	call	stop_timer

; 99   : 				nbuffered--;

	movzx	eax, BYTE PTR nbuffered
	dec	al
	mov	BYTE PTR nbuffered, al

; 100  : 				frame_nr = 1 - frame_nr;

	movzx	eax, BYTE PTR frame_nr
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR frame_nr, al
$LN15@main:

; 101  : 			}
; 102  : 			break;

	jmp	SHORT $LN5@main
$LN16@main:

; 103  : 
; 104  : 		case DATA_TIMEOUT:
; 105  : 			dbg_event("---- DATA %d timeout\n", arg);

	mov	edx, DWORD PTR arg$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BG@CGEOBPGK@?9?9?9?9?5DATA?5?$CFd?5timeout?6@
	call	dbg_event

; 106  : 			send_data_frame();

	call	send_data_frame
$LN5@main:

; 107  : 			break;
; 108  : 		}
; 109  : 
; 110  : 		if (nbuffered < 1 && phl_ready)

	movzx	eax, BYTE PTR nbuffered
	cmp	eax, 1
	jge	SHORT $LN17@main
	cmp	DWORD PTR phl_ready, 0
	je	SHORT $LN17@main

; 111  : 			enable_network_layer();

	call	enable_network_layer
	jmp	SHORT $LN18@main
$LN17@main:

; 112  : 		else
; 113  : 			disable_network_layer();

	call	disable_network_layer
$LN18@main:

; 114  : 	}

	jmp	$LN2@main

; 115  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+600]
	pop	rdi
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Course\Term4 计算机网络\实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT send_ack_frame
_TEXT	SEGMENT
s$ = 16
__$ArrayPad$ = 488
send_ack_frame PROC					; COMDAT

; 44   : {

	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__26CF6B07_datalink@c
	call	__CheckForDebuggerJustMyCode

; 45   : 	struct FRAME s;
; 46   : 
; 47   : 	s.kind = FRAME_ACK;

	mov	BYTE PTR s$[rbp], 2

; 48   : 	s.ack = 1 - frame_expected;

	movzx	eax, BYTE PTR frame_expected
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR s$[rbp+1], al

; 49   : 
; 50   : 	dbg_frame("Send ACK  %d\n", s.ack);

	movzx	eax, BYTE PTR s$[rbp+1]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_0O@MEIGFFMO@Send?5ACK?5?5?$CFd?6@
	call	dbg_frame

; 51   : 
; 52   : 	put_frame((unsigned char *)&s, 2);

	mov	edx, 2
	lea	rcx, QWORD PTR s$[rbp]
	call	put_frame

; 53   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:send_ack_frame$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
send_ack_frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Course\Term4 计算机网络\实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT send_data_frame
_TEXT	SEGMENT
s$ = 16
__$ArrayPad$ = 488
send_data_frame PROC					; COMDAT

; 29   : {

	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__26CF6B07_datalink@c
	call	__CheckForDebuggerJustMyCode

; 30   : 	struct FRAME s;
; 31   : 
; 32   : 	s.kind = FRAME_DATA;

	mov	BYTE PTR s$[rbp], 1

; 33   : 	s.seq = frame_nr;

	movzx	eax, BYTE PTR frame_nr
	mov	BYTE PTR s$[rbp+2], al

; 34   : 	s.ack = 1 - frame_expected;

	movzx	eax, BYTE PTR frame_expected
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR s$[rbp+1], al

; 35   : 	memcpy(s.data, buffer, PKT_LEN);

	mov	r8d, 256				; 00000100H
	lea	rdx, OFFSET FLAT:buffer
	lea	rcx, QWORD PTR s$[rbp+3]
	call	memcpy

; 36   : 
; 37   : 	dbg_frame("Send DATA %d %d, ID %d\n", s.seq, s.ack, *(short *)s.data);

	movsx	eax, WORD PTR s$[rbp+3]
	movzx	ecx, BYTE PTR s$[rbp+1]
	movzx	edx, BYTE PTR s$[rbp+2]
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, OFFSET FLAT:??_C@_0BI@GICFHJCA@Send?5DATA?5?$CFd?5?$CFd?0?5ID?5?$CFd?6@
	call	dbg_frame

; 38   : 
; 39   : 	put_frame((unsigned char *)&s, 3 + PKT_LEN);

	mov	edx, 259				; 00000103H
	lea	rcx, QWORD PTR s$[rbp]
	call	put_frame

; 40   : 	start_timer(frame_nr, DATA_TIMER);

	movzx	eax, BYTE PTR frame_nr
	mov	edx, 2000				; 000007d0H
	mov	ecx, eax
	call	start_timer

; 41   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:send_data_frame$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
send_data_frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Course\Term4 计算机网络\实验\Lab1-2022(Win+Linux)\Lab1-Windows-VS2019\datalink.c
;	COMDAT put_frame
_TEXT	SEGMENT
frame$ = 224
len$ = 232
put_frame PROC						; COMDAT

; 22   : {

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__26CF6B07_datalink@c
	call	__CheckForDebuggerJustMyCode

; 23   : 	*(unsigned int *)(frame + len) = crc32(frame, len);

	mov	edx, DWORD PTR len$[rbp]
	mov	rcx, QWORD PTR frame$[rbp]
	call	crc32
	movsxd	rcx, DWORD PTR len$[rbp]
	mov	rdx, QWORD PTR frame$[rbp]
	mov	DWORD PTR [rdx+rcx], eax

; 24   : 	send_frame(frame, len + 4);

	mov	eax, DWORD PTR len$[rbp]
	add	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR frame$[rbp]
	call	send_frame

; 25   : 	phl_ready = 0;

	mov	DWORD PTR phl_ready, 0

; 26   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
put_frame ENDP
_TEXT	ENDS
END
